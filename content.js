
const avzx = setInterval(() => {
    const path = document.querySelector('svg path[d="M7 13H5v-2h2v2zm3-4H8v6h2V9zm3-3h-2v12h2V6zm3 2h-2v8h2V8zm3 2h-2v4h2v-4zm-7-7c-4.96 0-9 4.04-9 9s4.04 9 9 9 9-4.04 9-9-4.04-9-9-9m0-1c5.52 0 10 4.48 10 10s-4.48 10-10 10S2 17.52 2 12 6.48 2 12 2z"]');
    
    if (path) {
        const menuItem = path.closest('.ytp-menuitem');
        if (menuItem) {
            menuItem.remove();
            clearInterval(avzx); 
        }
    }
}, 300); 
// const path = document.querySelector('svg path[d="M21 7v10H3V7h18m1-1H2v12h20V6zM11.5 2v3h1V2h-1zm1 17h-1v3h1v-3zM3.79 3 6 5.21l.71-.71L4.5 2.29 3.79 3zm2.92 16.5L6 18.79 3.79 21l.71.71 2.21-2.21zM19.5 2.29 17.29 4.5l.71.71L20.21 3l-.71-.71zm0 19.42.71-.71L18 18.79l-.71.71 2.21 2.21z"]');
// const path = document.querySelector('svg path[d="M16.67,4.31C19.3,5.92,21,8.83,21,12c0,4.96-4.04,9-9,9c-2.61,0-5.04-1.12-6.72-3.02C5.52,17.99,5.76,18,6,18 c6.07,0,11-4.93,11-11C17,6.08,16.89,5.18,16.67,4.31 M14.89,2.43C15.59,3.8,16,5.35,16,7c0,5.52-4.48,10-10,10 c-1,0-1.97-0.15-2.89-0.43C4.77,19.79,8.13,22,12,22c5.52,0,10-4.48,10-10C22,7.48,19,3.67,14.89,2.43L14.89,2.43z M12,6H6v1h4.5 L6,10.99v0.05V12h6v-1H7.5L12,7.01V6.98V6L12,6z"]');

const stylesConfig = [
{   
  regex: /https:\/\/www\.youtube\.com\/$/,   styles: `
    ytd-rich-grid-renderer {
      --ytd-rich-grid-items-per-row: 5 !important;
      --ytd-rich-grid-posts-per-row: 5 !important;
      --ytd-rich-grid-row-margin: 16px !important;
      --ytd-rich-grid-item-margin: 16px !important;
    }
  `
},
{
  regex: /^https:\/\/(www\.)?youtube\.com\/?/,
  styles: `
    .ytp-play-progress,
    #progress {
        background: var(--yt-spec-static-brand-red) !important;
    }

    .ytd-thumbnail-overlay-resume-playback-renderer#progress {
        background: red !important;
    }

    .YtThumbnailOverlayProgressBarHostWatchedProgressBarSegmentModern {
        background: var(--yt-spec-static-brand-red) !important;
    }

    .YtChapteredProgressBarChapteredPlayerBarChapterRefresh {
        background: var(--yt-spec-static-brand-red) !important;
    }

    .YtChapteredProgressBarChapteredPlayerBarFillRefresh {
        background: var(--yt-spec-static-brand-red) !important;
    }

    .YtProgressBarLineProgressBarPlayedRefresh {
        background: red !important;
    }

    #progress.yt-page-navigation-progress {
        background: var(--yt-spec-static-brand-red) !important;
    }

    .yt-icon-shape > div > svg > g:first-of-type > path:first-of-type {
        fill: var(--yt-spec-static-brand-red) !important;
    }

    #background.ytd-masthead,
    ytd-masthead[frosted-glass=with-chipbar] #background.ytd-masthead {
        background: var(--yt-spec-base-background) !important;
    }

    .yt-spec-icon-badge-shape--type-notification-refresh .yt-spec-icon-badge-shape__badge {
        background-color: red !important;
        color: white !important;
    }

    #right-arrow-container {
        display: none !important; 
    }

    #teaser-carousel {
        display: none !important; /* removes click to view premier chat icon bcz there is one already */
    }

    .ytd-rich-shelf-renderer {
        display: none !important; /* removes games youtube */
    }

    yt-mealbar-promo-renderer {
        display: none !important; /* removes sponsor this channel popup */ 
    }

    .YtwHowThisWasMadeSectionViewModelHost {
        display: none !important; /* removes "this content was generated by AI bullshit" */
    }

    ytd-video-description-transcript-section-renderer {
        display: none !important; /* removes transcript video bullshit from video description  */
    }

    ytd-video-description-infocards-section-renderer a#header {
        display: none !important; /* removes 2nd channel icon from video description */
    }

    ytd-reel-shelf-renderer {
        display: none !important; /* removes shorts from video description and probably from some other places */
    }

    tp-yt-paper-toast#toast {
        display: none !important; /* removes 'Still watching?' youtube popup */
    }

    .ytSearchboxComponentSearchButtonDark,
    .ytSearchboxComponentInputBox {
        background-color: transparent !important; /* sets search container transparent background not fucking grey */
    }

    #voice-search-button.ytd-masthead {
        display: none !important; /* removes voice search button */
    }

    #tp-yt-paper-dialog.style-scope.ytd-popup-container {
        display: none !important; /* removes clown youtube survey */
    }

    html, body {
        overflow-x: hidden !important; /* Removes horizontal scrollbar (wtf you adding youtube) */
    }

    ytd-single-option-survey-renderer {
        display: none !important; /* Removes the survey element */
    }
  `
}

];

function applyStyles() {
  const currentUrl = window.location.href;
  console.log('Current URL:', currentUrl);

  const existingStyles = document.querySelectorAll('style[data-dynamic]');
  console.log('Checking old styles...', existingStyles.length > 0 ? existingStyles : 'No old styles');

  existingStyles.forEach(style => {
    const styleId = style.getAttribute('data-style-id');
    const config = stylesConfig.find(config => generateStyleId(config.regex) === styleId);
    
    if (config && !currentUrl.match(config.regex)) {
      console.log('Removing style:', styleId);
      style.remove();
    }
  });

  let stylesApplied = false;

  stylesConfig.forEach(config => {
    const styleId = generateStyleId(config.regex);
    if (currentUrl.match(config.regex)) {
      console.log('Style matches current page');
      let existingStyle = document.querySelector(`style[data-style-id="${styleId}"]`);
      if (!existingStyle) {
        const style = document.createElement('style');
        style.textContent = config.styles;
        style.setAttribute('data-dynamic', 'true');
        style.setAttribute('data-style-id', styleId);
        document.head.appendChild(style);
        stylesApplied = true;
      }
    }
  });

  if (!stylesApplied) {
    console.log('No matching styles for current page');
  }
}

function generateStyleId(regex) {
  return regex.toString().replace(/[^\w]/g, '_');
}


let lastUrl = window.location.href;
applyStyles();
setInterval(() => {
  const currentUrl = window.location.href;
  if (currentUrl !== lastUrl) {
    console.log(`URL: ${currentUrl}`);
    lastUrl = currentUrl;
    applyStyles();
  }
}, 500);

const s = document.createElement('script');
s.src = chrome.runtime.getURL('autoconfirm.js');
s.onload = function () { this.remove(); };
(document.head || document.documentElement).appendChild(s);
